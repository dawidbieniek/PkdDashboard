@using PkdDashboard.WebApp.Jobs
@using PkdDashboard.WebApp.Services
@using System.Linq.Expressions

@typeparam T where T : IJob

@inject HangfireService HangfireService

<MudStack>
    <MudText Typo="Typo.h6">@(IJobUtil.GetJobId<T>())</MudText>
    <MudStack Row>
        @if (AllowScheduling)
        {
            <MudButton Color="Color.Warning" OnClick="StartJob" Disabled="_isLoading || _status">Start</MudButton>
            <MudButton Color="Color.Warning" OnClick="StopJob" Disabled="_isLoading || !_status">Stop</MudButton>
            <StatusChip Status="_status" IsLoading="_isLoading" />
        }
        @if(AllowScheduling && AllowForce)
        {
            <MudSpacer />
        }
        @if (AllowForce)
        {
            <MudCheckBox @bind-Value="_allowForce" Label="Allow forcing"/>
            @if (AdditionalForceFields is not null)
            {
                @AdditionalForceFields
            }
            <MudButton Color="Color.Error" OnClick="ForceJob" Disabled="!_allowForce || !AdditionalForceFieldsValidationResult">Force</MudButton>
        }
    </MudStack>
</MudStack>

@code {
    private bool _isLoading = true;
    private bool _status;
    private bool _allowForce = false;

    [Parameter, EditorRequired]
    public Expression<Func<T, Task>> JobExecute { get; set; } = default!;
    [Parameter]
    public bool AllowScheduling { get; set; } = true;
    [Parameter]
    public bool AllowForce { get; set; } = true;
    [Parameter]
    public int? JobScheduleUtcHour { get; set; }
    [Parameter]
    public int StatusUpdateDelayMs { get; set; } = 2000;
    [Parameter]
    public RenderFragment? AdditionalForceFields { get; set; }
    [Parameter]
    public bool AdditionalForceFieldsValidationResult { get; set; } = true;


    protected override void OnInitialized()
    {
        UpdateJobStatus();
    }

    private void ForceJob()
    {
        HangfireService.RunJob<T>(JobExecute);
        _allowForce = false;
    }

    private async Task StartJob()
    {
        if (!AllowScheduling) return;
        if(!JobScheduleUtcHour.HasValue)
            throw new InvalidOperationException("JobScheduleUtcHour must be set when AllowScheduling is true.");

        HangfireService.EnableJobPeriodicRun<T>(JobExecute, JobScheduleUtcHour.Value);
        await UpdateStatusAfterDelay();
    }

    private async Task StopJob()
    {
        if (!AllowScheduling) return;

        HangfireService.DisableJobPeriodicRun<T>();
        await UpdateStatusAfterDelay();
    }

    private async Task UpdateStatusAfterDelay()
    {
        _isLoading = true;
        StateHasChanged();
        await Task.Delay(StatusUpdateDelayMs);
        UpdateJobStatus();
    }

    private void UpdateJobStatus()
    {
        _status = HangfireService.IsJobScheduled<T>();
        _isLoading = false;
    }
}
