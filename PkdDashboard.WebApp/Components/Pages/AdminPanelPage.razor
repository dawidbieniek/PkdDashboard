@page "/admin"
@using PkdDashboard.Global
@using PkdDashboard.WebApp.Data.Entities.Auth
@using PkdDashboard.WebApp.Jobs
@using PkdDashboard.WebApp.Jobs.QueryCompanyCounts

@rendermode InteractiveServer

@attribute [Authorize(Roles = UserRoles.Admin)]

@inject CompanyCountService CompanyCountService

<MudPaper Elevation="2">
    <MudStack>
        <MudPaper Elevation="1">
            <JobControlRow T="QueryCompanyCountsJob" JobExecute="j => j.ExecuteAsync(CancellationToken.None)" JobScheduleUtcHour="8" />
        </MudPaper>
        <MudPaper Elevation="1">
            <JobControlRow T="FixCompanyCountsForDayJob"
                           JobExecute="j => j.ExecuteAsync(DateOnly.FromDateTime(FixCompanyCountSelectedDate!.Value), CancellationToken.None)"
                           AllowScheduling="false"
                           AdditionalForceFieldsValidationResult="FixCompanyCountSelectedDate is not null"
                           ShowWarning="_fixCompanyCountAllowedDates.Count > 0">
                <AdditionalForceFields>
                    <MudDatePicker @bind-Date="FixCompanyCountSelectedDate" IsDateDisabledFunc="x => !_fixCompanyCountAllowedDates.Contains(x)" Class="medium-input" Label="Date" />
                </AdditionalForceFields>
            </JobControlRow>
        </MudPaper>
        <iframe src="/hangfire" style="height:600px" />
    </MudStack>
</MudPaper>

@code {
    private DateTime? FixCompanyCountSelectedDate { get; set; }
    private List<DateTime> _fixCompanyCountAllowedDates = [];

    protected override async Task OnInitializedAsync()
    {
        _fixCompanyCountAllowedDates = await CompanyCountService.GetAllDatesWithMissingCounts();
    }
}