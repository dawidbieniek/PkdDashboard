@page "/admin"
@using PkdDashboard.Global

@rendermode InteractiveServer

@inject HangfireService HangfireService

<MudStack>
    <MudStack Row>
        <MudButton Color="Color.Primary" OnClick="UpdateJobStatus">Check status</MudButton>
        @if (_loadingStatus)
        {
            <MudChip T="string" Color="Color.Info">Loading...</MudChip>
        }
        else
        {
            if (_status)
            {
                <MudChip T="string" Color="Color.Success">Enabled</MudChip>
            }
            else
            {
                <MudChip T="string" Color="Color.Error">Disabled</MudChip>
            }
        }
    </MudStack>
    <MudStack Row>
        <MudButton Color="Color.Warning" OnClick="StartJob" Disabled="_loadingStatus || _status">Start</MudButton>
        <MudButton Color="Color.Warning" OnClick="StopJob" Disabled="_loadingStatus || !_status">Stop</MudButton>
        <MudSpacer />
        <MudCheckBox @bind-Value="_allowForce" Label="Allow forcing" />
        <MudButton Color="Color.Error" OnClick="HangfireService.TriggerJobAsync" Disabled="!_allowForce">Force</MudButton>
    </MudStack>
</MudStack>

@if (!string.IsNullOrEmpty(_hangfireDashboardUrl))
{
    <iframe src="@_hangfireDashboardUrl" style="height:600px" />
}

@code {
    private string? _hangfireDashboardUrl;
    private bool _loadingStatus = true;
    private bool _status;

    private bool _allowForce = false;

    protected override void OnInitialized()
    {
        var hangfireAppUrl = ServiceDiscoveryUtil.GetServiceEndpoint(ServiceKeys.DataPollingService, "http");
        _hangfireDashboardUrl = hangfireAppUrl + "/hangfire";
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateJobStatus();
    }

    private async Task StartJob()
    {
        await HangfireService.ScheduleJobAsync();
        _loadingStatus = true;
        StateHasChanged();
        await Task.Delay(2000);
        await UpdateJobStatus();
    }

    private async Task StopJob()
    {
        await HangfireService.UnScheduleJobAsync();
        _loadingStatus = true;
        StateHasChanged();
        await Task.Delay(2000);
        await UpdateJobStatus();
    }

    private async Task UpdateJobStatus()
    {
        _status = await HangfireService.IsJobScheduledAsync();
        _loadingStatus = false;
    }
}
