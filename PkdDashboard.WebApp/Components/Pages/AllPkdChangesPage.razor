@page "/"
@using PkdDashboard.Shared.DateUtil
@using PkdDashboard.WebApp.Data.Dto
@using PkdDashboard.WebApp.Data.Entities.Auth

@rendermode InteractiveServer
@attribute [Authorize]

@inject CompanyCountService CompanyCountService

<PageTitle>Dashboard</PageTitle>

<MudContainer Class="h-100" MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="2" Class="h-100">
        <MudStack>
            <MudStack Row Class="h-100 px-2">
                <MudDatePicker @bind-Date="PreviousDay" Class="medium-input" IsDateDisabledFunc="x => !_availableDates.Contains(x)" Label="Poprzednia data" />
                <MudDatePicker @bind-Date="CurrentDay" Class="medium-input" IsDateDisabledFunc="x => !_availableDates.Contains(x)" Label="Obecna data" />
                <MudSpacer />
            </MudStack>
            @if (_mismatchedCountsCount)
            {
                <MudAlert Severity="Severity.Warning" Class="mt-2">
                    <MudText Typo="Typo.body1">
                        Liczba wpisów na dzień <strong>@CurrentDay?.ToString("yyyy-MM-dd")</strong> i <strong>@PreviousDay?.ToString("yyyy-MM-dd")</strong> nie jest taka sama.
                    </MudText>
                    <br />
                    <MudText Typo="Typo.body2">
                        Może to oznaczać, że nie wszystkie dane zostały pobrane.
                    </MudText>
                </MudAlert>
            }
            @if(_missingTodayCounts)
            {
                <MudAlert Severity="Severity.Warning" Class="mt-2">
                    <MudText Typo="Typo.body1">
                        Wpisy na dzisiejszy dzień: <strong>@CurrentDay?.ToString("yyyy-MM-dd")</strong> nie zostały jeszcze pobrane.
                    </MudText>
                </MudAlert>
            }
            <MudTable T="CompanyCountDiff" @ref="_table" Class="full-height-table" ServerData="ServerReload" Hover Dense>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Zmiany liczby firm</MudText>
                    <MudSpacer />
                    <MudTextField T="string"
                                  Class="mt-0"
                                  ValueChanged="@(s => OnSearch(s))"
                                  Placeholder="Wyszukaj"
                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium">
                    </MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortLabel="@nameof(CompanyCountDiff.PkdString)" T="CompanyCountDiff">PKD</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="@nameof(CompanyCountDiff.PreviousCount)" T="CompanyCountDiff">Poprzednio</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="@nameof(CompanyCountDiff.CurrentCount)" T="CompanyCountDiff">Obecnie</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="@nameof(CompanyCountDiff.Difference)" T="CompanyCountDiff">Różnica</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Pkd"><PkdTextLink Text="@context.PkdString" /></MudTd>
                    <MudTd DataLabel="Previous">@context.PreviousCount</MudTd>
                    <MudTd DataLabel="Current">@context.CurrentCount</MudTd>
                    <MudTd DataLabel="Difference">
                        <MudText Typo="Typo.body2" Color="GetDifferenceColor(context.Difference)">@context.Difference</MudText>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTableCommonPager />
                </PagerContent>
            </MudTable>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private MudTable<CompanyCountDiff> _table = default!;
    private string _searchQuery = string.Empty;
    private bool _mismatchedCountsCount = false;
    private bool _missingTodayCounts = false;

    private DateTime? CurrentDay
    {
        get;
        set
        {
            if (field == value)
                return;

            field = value;
            _table.ReloadServerData();
            StateHasChanged();
        }
    }
    private DateTime? PreviousDay
    {
        get;
        set
        {
            if (field == value)
                return;

            field = value;
            _table.ReloadServerData();
            StateHasChanged();
        }
    }

    private List<DateTime> _availableDates = [];

    protected override async Task OnInitializedAsync()
    {
        _availableDates = await CompanyCountService.GetAllDatesWithEntryAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (_availableDates.Count > 0)
            {
                CurrentDay = MathExtensions.Min(DateUtil.TodayDateTime, _availableDates.Last());
                _missingTodayCounts = CurrentDay != DateUtil.TodayDateTime;
            }
            if (_availableDates.Count > 1)
                PreviousDay = MathExtensions.Min(DateUtil.TodayDateTime.AddDays(-1), _availableDates[^2]);
        }
    }

    private async Task<TableData<CompanyCountDiff>> ServerReload(TableState state, CancellationToken token)
    {
        var currentDay = DateOnly.FromDateTime(CurrentDay ?? DateUtil.TodayDateTime);
        var previousDay = DateOnly.FromDateTime(PreviousDay ?? DateUtil.TodayDateTime.AddDays(-1));

        var todayCounts = (await CompanyCountService.GetListQueryAsync(currentDay, new(PagerQuery.All, _searchQuery)))
            .Items
            .ToDictionary(cc => cc.PkdEntry, cc => cc);
        var previousCounts = (await CompanyCountService.GetListQueryAsync(previousDay, new(PagerQuery.All, _searchQuery)))
            .Items
            .ToDictionary(cc => cc.PkdEntry, cc => cc);

        _mismatchedCountsCount = todayCounts.Count != previousCounts.Count;

        var allPkds = todayCounts.Keys.ToHashSet();
        allPkds.Union(previousCounts.Keys.ToHashSet());

        var allCounts = allPkds
            .Select(pkd => new CompanyCountDiff(pkd.PkdString,
                todayCounts.TryGetValue(pkd, out var todayCount) ? todayCount.Count : 0,
                previousCounts.TryGetValue(pkd, out var previousCount) ? previousCount.Count : 0
            ))
            .OrderByTableState(state)
            .SkipTake(new(state))
            .ToList();

        return new TableData<CompanyCountDiff>()
        {
            TotalItems = allPkds.Count,
            Items = allCounts
        };
    }

    private void OnSearch(string text)
    {
        _searchQuery = text;
        _table.ReloadServerData();
    }

    private Color GetDifferenceColor(int diff)
        => diff > 0
            ? Color.Success
            : diff == 0
                ? Color.Inherit
                : Color.Error;

}
