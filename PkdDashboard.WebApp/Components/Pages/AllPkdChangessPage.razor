@page "/"
@using PkdDashboard.Shared.DateUtil

@rendermode InteractiveServer
@attribute [Authorize]

@inject CompanyCountService CompanyCountService

<PageTitle>Dashboard</PageTitle>

<MudContainer Class="h-100" MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="2">
        <MudStack>
            <MudStack Row Class="h-100 px-2">
                <MudDatePicker @bind-Date="PreviousDay" IsDateDisabledFunc="x => !_availableDates.Contains(x)" Label="Poprzednia data" />
                <MudDatePicker @bind-Date="CurrentDay" IsDateDisabledFunc="x => !_availableDates.Contains(x)" Label="Obecna data" />
                <MudSpacer />
            </MudStack>
            <MudTable T="CompanyCountDiff" @ref="_table" Class="full-height-table" ServerData="ServerReload" Hover Dense>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Zmiany liczby firm</MudText>
                    <MudSpacer />
                    <MudTextField T="string"
                                  Class="mt-0"
                                  ValueChanged="@(s => OnSearch(s))"
                                  Placeholder="Wyszukaj"
                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium">
                    </MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>PKD</MudTh>
                    <MudTh>Poprzednio</MudTh>
                    <MudTh>Obecnie</MudTh>
                    <MudTh>Różnica</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Pkd">@context.PkdString</MudTd>
                    <MudTd DataLabel="Previous">@context.PreviousCount</MudTd>
                    <MudTd DataLabel="Current">@context.CurrentCount</MudTd>
                    <MudTd DataLabel="Difference">
                        <MudText Typo="Typo.body2" Color="GetDifferenceColor(context.Difference)">@context.Difference</MudText>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTableCommonPager />
                </PagerContent>
            </MudTable>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private MudTable<CompanyCountDiff> _table = default!;
    private string _searchQuery = string.Empty;

    private DateTime? CurrentDay
    {
        get;
        set
        {
            if (field == value)
                return;

            field = value;
            _table.ReloadServerData();
        }
    } = DateUtil.TodayDateTime;
    private DateTime? PreviousDay
    {
        get;
        set
        {
            if (field == value)
                return;

            field = value;
            _table.ReloadServerData();
        }
    } = DateUtil.TodayDateTime.AddDays(-1);

    private List<DateTime> _availableDates = [];

    protected override async Task OnInitializedAsync()
    {
        _availableDates = await CompanyCountService.GetAllDatesWithEntryAsync();
    }

    private async Task<TableData<CompanyCountDiff>> ServerReload(TableState state, CancellationToken token)
    {
        var currentDay = DateOnly.FromDateTime(CurrentDay ?? DateUtil.TodayDateTime);
        var previousDay = DateOnly.FromDateTime(PreviousDay ?? DateUtil.TodayDateTime.AddDays(-1));

        var todayCounts = (await CompanyCountService.GetListQueryAsync(currentDay, new(PagerQuery.All, _searchQuery)))
            .Items
            .ToDictionary(cc => cc.PkdEntry, cc => cc);
        var previousCounts = (await CompanyCountService.GetListQueryAsync(previousDay, new(PagerQuery.All, _searchQuery)))
            .Items
            .ToDictionary(cc => cc.PkdEntry, cc => cc);

        var allPkds = todayCounts.Keys.ToHashSet();
        allPkds.Union(previousCounts.Keys.ToHashSet());

        var allCounts = allPkds
            .SkipTake(new(state))
            .Select(pkd => new CompanyCountDiff(
                pkd.PkdString,
                todayCounts.TryGetValue(pkd, out var todayCount) ? todayCount.Count : 0,
                previousCounts.TryGetValue(pkd, out var previousCount) ? previousCount.Count : 0
            )).ToList();

        return new TableData<CompanyCountDiff>()
        {
            TotalItems = allPkds.Count,
            Items = allCounts
        };
    }

    private void OnSearch(string text)
    {
        _searchQuery = text;
        _table.ReloadServerData();
    }

    private Color GetDifferenceColor(int diff)
        => diff > 0
            ? Color.Success
            : diff == 0
                ? Color.Inherit
                : Color.Error;

    private record CompanyCountDiff(string PkdString, int CurrentCount, int PreviousCount)
    {
        public int Difference => CurrentCount - PreviousCount;
    }
}
